// src/pages/ReportsHistoryPage.js
import { useEffect, useState } from "react";
import {
  Table,
  Button,
  Spin,
  Tag,
  Form,
  Select,
  DatePicker,
  Tooltip,
} from "antd";
import { DownloadOutlined, ReloadOutlined } from "@ant-design/icons";
import axios from "axios";

const { RangePicker } = DatePicker;
const { Option } = Select;

function ReportsHistoryPage() {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();

  const fetchReports = async (filters = {}) => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      const res = await axios.get("http://localhost:5000/api/reports", {
        headers: { Authorization: `Bearer ${token}` },
        params: filters,
      });
      setReports(res.data);
    } catch (error) {
      console.error("Error loading reports:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleFilter = (values) => {
    const filters = {};

    if (values.type) {
      filters.type = values.type;
    }

    if (values.dateRange) {
      filters.from = values.dateRange[0].startOf("day").toISOString();
      filters.to = values.dateRange[1].endOf("day").toISOString();
    }

    fetchReports(filters);
  };

  const handleResetFilters = () => {
    form.resetFields();
    fetchReports();
  };

  const downloadReport = (fileUrl) => {
    const link = document.createElement("a");
    link.href = `/${fileUrl}`;
    link.download = fileUrl;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  useEffect(() => {
    fetchReports();
  }, []);

  const columns = [
    {
      title: "Generated By",
      dataIndex: ["generatedByUserId", "email"],
      key: "generatedByUserId",
      render: (email) => email || "Unknown",
    },
    {
      title: "Report Type",
      dataIndex: "reportType",
      key: "reportType",
      render: (type) => (
        <Tag
          color={
            type === "daily"
              ? "green"
              : type === "weekly"
              ? "blue"
              : type === "alerts"
              ? "volcano"
              : "purple"
          }
        >
          {type.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: "Period Start",
      dataIndex: "reportPeriodStart",
      key: "reportPeriodStart",
      render: (date) => new Date(date).toLocaleDateString(),
    },
    {
      title: "Period End",
      dataIndex: "reportPeriodEnd",
      key: "reportPeriodEnd",
      render: (date) => new Date(date).toLocaleDateString(),
    },
    {
      title: "File",
      dataIndex: "fileUrl",
      key: "fileUrl",
    },
    {
      title: "Actions",
      key: "actions",
      render: (_, record) => (
        <Button
          type="primary"
          icon={<DownloadOutlined />}
          onClick={() => downloadReport(record.fileUrl)}
        >
          Download
        </Button>
      ),
    },
  ];

  if (loading) {
    return (
      <div style={{ textAlign: "center", padding: "50px" }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div style={{ padding: "24px" }}>
      <h2
        style={{ textAlign: "center", marginBottom: "24px", color: "#1890ff" }}
      >
        Reports History
      </h2>

      <Form
        form={form}
        layout="inline"
        onFinish={handleFilter}
        style={{ marginBottom: 24, gap: 16, flexWrap: "wrap" }}
      >
        <Form.Item name="type" label="Type">
          <Select
            placeholder="Select report type"
            style={{ width: 180 }}
            allowClear
          >
            <Option value="trips">Trips</Option>
            <Option value="alerts">Alerts</Option>
            <Option value="daily">Daily</Option>
            <Option value="weekly">Weekly</Option>
            <Option value="custom">Custom</Option>
          </Select>
        </Form.Item>

        <Form.Item name="dateRange" label="Period">
          <RangePicker />
        </Form.Item>

        <Form.Item>
          <Button type="primary" htmlType="submit">
            Filter
          </Button>
        </Form.Item>

        <Form.Item>
          <Tooltip title="Reset Filters">
            <Button icon={<ReloadOutlined />} onClick={handleResetFilters} />
          </Tooltip>
        </Form.Item>
      </Form>

      <Table
        columns={columns}
        dataSource={reports}
        rowKey="_id"
        pagination={{ pageSize: 8 }}
      />
    </div>
  );
}

export default ReportsHistoryPage;
